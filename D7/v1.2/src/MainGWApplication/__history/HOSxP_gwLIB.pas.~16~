unit HOSxP_gwLIB;

interface

uses Windows, uCiaXml,MyAccess,Forms,Sysutils;

const
  HOSxPLIB = 'hosxpcon.dll';
  ExtLIB = 'extcon.dll';
  _config_file ='gwconfig.xml';
  _sample_db='dba0';



type
  TgwGetDataSet = function(const SQL: string): Variant;stdcall;
  TgwGetSerialNumber = function(sn: string): Integer;stdcall;
  TgwUpdateDelta = function (Delta: OleVariant; SQLText: string): Integer;
  TgwVersionInfo = function ():integer;

  TextGetDataSet = function(const SQL: string): Variant;stdcall;
  TextUpdateDelta = function (Delta: OleVariant; SQLText: string): Integer;
  TextVersionInfo = function ():integer;



function HOSxP_gwUpdateDelta(Delta: OleVariant; SQLText: string): Integer;
function HOSxP_gwGetDataSet(const SQL: string): Variant;stdcall;
function HOSxP_gwGetSerialNumber(sn: string): Integer; stdcall;
function HOSxP_gwVersionInfo():integer;

function HOSxP_extUpdateDelta(Delta: OleVariant; SQLText: string): Integer;
function HOSxP_extGetDataSet(const SQL: string): Variant;stdcall;
function HOSxP_extVersionInfo():integer;


function checkHosConnection: boolean;
function checkGwConnection: boolean;
function getHosTrackDate : TDateTime;
function getGwTrackDate : TDateTime;







implementation





var

  HOSxPLIB_DLLHandle : THandle;
  ExtLIB_DLLHandle : THandle;

  _HOSxP_gwGetDataSet : TgwGetDataSet;
  _HOSxp_gwGetSerialNumber : TgwGetSerialNumber;
  _HOSxP_gwUpdateDelta : TgwUpdateDelta;
  _HOSxP_gwVersionInfo : TgwVersionInfo;

  _HOSxP_extGetDataSet : TextGetDataSet;
  _HOSxP_extUpdateDelta  : TextUpdateDelta;
  _HOSxP_extVersionInfo : TextVersionInfo;



function getHosTrackDate : TDateTime;
var dt : TDateTime;
    dd,mm,yyyy:word;

    xmlConn : TXMLConfig;
begin

  xmlConn:=TXMLConfig.Create(ExtractFilePath(Application.ExeName)+_config_file);
  if (xmlConn.ReadString('HOSxPConfig','TRACKDATE_DD','')<>'') then
  begin
   dd:= strtoint(xmlConn.ReadString('HOSxPConfig','TRACKDATE_DD',''));
   mm:= strtoint(xmlConn.ReadString('HOSxPConfig','TRACKDATE_MM',''));
   yyyy:=strtoint(xmlConn.ReadString('HOSxPConfig','TRACKDATE_YYYY',''));
  end;

    result:=EncodeDate(yyyy,mm,dd);

end;

function getGwTrackDate : TDateTime;
var dt : TDateTime;
    dd,mm,yyyy:word;

    xmlConn : TXMLConfig;
begin

  xmlConn:=TXMLConfig.Create(ExtractFilePath(Application.ExeName)+_config_file);
  if (xmlConn.ReadString('ExtConfig','TRACKDATE_DD','')<>'') then
  begin
   dd:= strtoint(xmlConn.ReadString('ExtConfig','TRACKDATE_DD',''));
   mm:= strtoint(xmlConn.ReadString('ExtConfig','TRACKDATE_MM',''));
   yyyy:=strtoint(xmlConn.ReadString('ExtConfig','TRACKDATE_YYYY',''));
  end;

    result:=EncodeDate(yyyy,mm,dd);

end;

function checkHosConnection: boolean;
var MyConnectionTest:TMyConnection;
    rep:boolean;
    xmlConn : TXMLConfig;
    _app_address,_app_hostname,_app_database,_app_user,_app_password:string;
begin
     MyConnectionTest :=TMyConnection.Create(Application);
     with MyConnectionTest do
     begin

      //
      rep:=false;
      xmlConn:=TXMLConfig.Create(ExtractFilePath(Application.ExeName)+_config_file);
      if (xmlConn.ReadString('HOSxPConfig','ADDRESS','')='') then
      begin
          // mssql connection
          xmlConn.WriteString('HOSxPConfig','ADDRESS','localhost');
          xmlConn.WriteString('HOSxPConfig','HOSTNAME','www.hosxp.net');
          xmlConn.WriteString('HOSxPConfig','USER','root');
          xmlConn.WriteString('HOSxPConfig','PASSWORD','123456');
          xmlConn.WriteString('HOSxPConfig','DATABASE',_sample_db);
          xmlConn.Save;
      end;

       _app_address:= xmlConn.ReadString('HOSxPConfig','ADDRESS','');
       _app_hostname:= xmlConn.ReadString('HOSxPConfig','HOSTNAME','');
       _app_database:=xmlConn.ReadString('HOSxPConfig','DATABASE','');
       _app_user:=xmlConn.ReadString('HOSxPConfig','USER','root');
       _app_password:=xmlConn.ReadString('HOSxPConfig','PASSWORD','123456');

        MyConnectionTest.Connected:=false;
        MyConnectionTest.Database:=_app_database;
        MyConnectionTest.Server:= _app_address;
        MyConnectionTest.Username:=_app_user;
        MyConnectionTest.Password:=_app_password;
        MyConnectionTest.Port:=3306;


      MyConnectionTest.Options.Charset:='tis620';
      try
        MyConnectionTest.Connected:=true;
        MyConnectionTest.Connected:=false;
        MyConnectionTest.Free;

        rep := true;
      except
        rep := false;
      end;

     end;
     result := rep;
end;


function checkGwConnection: boolean;
var MyConnectionTest:TMyConnection;
    rep:boolean;
    xmlConn : TXMLConfig;
    _app_address,_app_hostname,_app_database,_app_user,_app_password:string;
begin
     MyConnectionTest :=TMyConnection.Create(Application);
     with MyConnectionTest do
     begin

      //
      rep:=false;
      xmlConn:=TXMLConfig.Create(ExtractFilePath(Application.ExeName)+_config_file);
      if (xmlConn.ReadString('ExtConfig','ADDRESS','')='') then
      begin
          // mssql connection
          xmlConn.WriteString('ExtConfig','ADDRESS','localhost');
          xmlConn.WriteString('ExtConfig','HOSTNAME','www.hosxp.net');
          xmlConn.WriteString('ExtConfig','USER','root');
          xmlConn.WriteString('ExtConfig','PASSWORD','123456');
          xmlConn.WriteString('ExtConfig','DATABASE',_sample_db);
          xmlConn.Save;
      end;

       _app_address:= xmlConn.ReadString('ExtConfig','ADDRESS','');
       _app_hostname:= xmlConn.ReadString('ExtConfig','HOSTNAME','');
       _app_database:=xmlConn.ReadString('ExtConfig','DATABASE','');
       _app_user:=xmlConn.ReadString('ExtConfig','USER','root');
       _app_password:=xmlConn.ReadString('ExtConfig','PASSWORD','123456');


        MyConnectionTest.Connected:=false;
        MyConnectionTest.Database:=_app_database;
        MyConnectionTest.Server:= _app_address;
        MyConnectionTest.Username:=_app_user;
        MyConnectionTest.Password:=_app_password;

      MyConnectionTest.Options.Charset:='tis620';
      MyConnectionTest.Port:=3306;
      try
        MyConnectionTest.Connected:=true;
        MyConnectionTest.Connected:=false;
        MyConnectionTest.Free;
        rep := true;
      except
        rep := false;
      end;

     end;
     result := rep;
end;



//========================================================================================================


//function HOSxP_gwUpdateDelta(Delta: OleVariant; SQLText: string): Integer;  external HOSxPLIB name 'HOSxP_gwUpdateDelta';
//function HOSxP_gwGetDataSet(const SQL: string): Variant;stdcall;  external HOSxPLIB name 'HOSxP_gwGetDataSet';
//function HOSxP_gwVersionInfo():integer;external HOSxPLIB name 'HOSxP_gwVersionInfo';

function HOSxP_gwVersionInfo():integer;
begin
  try
    HOSxPLIB_DLLHandle := LoadLibrary(HOSxPLIB);
    if HOSxPLIB_DLLHandle<>0 then
    if checkHosConnection then
    begin
       _HOSxP_gwVersionInfo := GetProcAddress(HOSxPLIB_DLLHandle,'HOSxP_gwVersionInfo');
      if Assigned(_HOSxP_gwVersionInfo) then
      begin
           Result := _HOSxP_gwVersionInfo;
      end;
    end;
  finally
    FreeLibrary(HOSxPLIB_DLLHandle);
  end;
end;

function HOSxP_gwUpdateDelta(Delta: OleVariant; SQLText: string): Integer;
begin
  try
    HOSxPLIB_DLLHandle := LoadLibrary(HOSxPLIB);
    if checkHosConnection then
    if HOSxPLIB_DLLHandle<>0 then
    begin
       _HOSxP_gwUpdateDelta := GetProcAddress(HOSxPLIB_DLLHandle,'HOSxP_gwUpdateDelta');
      if Assigned(_HOSxP_gwUpdateDelta) then
      begin
           Result := _HOSxP_gwUpdateDelta(delta,SQLText);
      end;
    end;
  finally
    FreeLibrary(HOSxPLIB_DLLHandle);
  end;
end;


function HOSxP_gwGetDataSet(const SQL: string): Variant;
begin
  try
    HOSxPLIB_DLLHandle := LoadLibrary(HOSxPLIB);
    if checkHosConnection then
    if HOSxPLIB_DLLHandle<>0 then
    begin
       _HOSxP_gwGetDataSet := GetProcAddress(HOSxPLIB_DLLHandle,'HOSxP_gwGetDataSet');
      if Assigned(_HOSxP_gwGetDataSet) then
      begin
           Result := _HOSxP_gwGetDataSet(SQL);
      end;
    end;
  finally
   FreeLibrary(HOSxPLIB_DLLHandle);
  end;
end;

function HOSxP_gwGetSerialNumber(sn: string): Integer;
begin
  try
    HOSxPLIB_DLLHandle := LoadLibrary(HOSxPLIB);
    if checkHosConnection then
    if HOSxPLIB_DLLHandle<>0 then
    begin
       _HOSxp_gwGetSerialNumber := GetProcAddress(HOSxPLIB_DLLHandle,'HOSxP_gwGetSerialNumber');
      if Assigned(_HOSxp_gwGetSerialNumber) then
      begin
           Result := _HOSxp_gwGetSerialNumber(sn);
      end;
    end;
  finally
   FreeLibrary(HOSxPLIB_DLLHandle);
  end;
end;

//function HOSxP_extUpdateDelta(Delta: OleVariant; SQLText: string): Integer;  external ExtLIB name 'HOSxP_extUpdateDelta';
//function HOSxP_extGetDataSet(const SQL: string): Variant;stdcall;  external ExtLIB name 'HOSxP_extGetDataSet';
//function HOSxP_extVersionInfo():integer; external ExtLIB name 'HOSxP_extVersionInfo';

function HOSxP_extGetDataSet(const SQL: string): Variant;
begin
  try
    ExtLIB_DLLHandle := LoadLibrary(ExtLIB);
    if checkGwConnection then
    if ExtLIB_DLLHandle<>0 then
    begin
       _HOSxP_extGetDataSet := GetProcAddress(ExtLIB_DLLHandle,'HOSxP_extGetDataSet');
      if Assigned(_HOSxP_extGetDataSet) then
      begin
           Result := _HOSxP_extGetDataSet(SQL);
      end;
    end;
  finally
   FreeLibrary(ExtLIB_DLLHandle);
  end;
end;

function HOSxP_extUpdateDelta(Delta: OleVariant; SQLText: string): Integer;
begin
  try
    ExtLIB_DLLHandle := LoadLibrary(ExtLIB);
    if checkGwConnection then
    if ExtLIB_DLLHandle<>0 then
    begin
       _HOSxP_extUpdateDelta := GetProcAddress(ExtLIB_DLLHandle,'HOSxP_extUpdateDelta');
      if Assigned(_HOSxP_extUpdateDelta) then
      begin
           Result := _HOSxP_extUpdateDelta(delta,SQLText);
      end;
    end;
  finally
    FreeLibrary(ExtLIB_DLLHandle);
  end;
end;


function HOSxP_extVersionInfo():integer;
begin
  try
    ExtLIB_DLLHandle := LoadLibrary(ExtLIB);
    if checkGwConnection then
    if ExtLIB_DLLHandle<>0 then
    begin
       _HOSxP_extVersionInfo := GetProcAddress(ExtLIB_DLLHandle,'HOSxP_gwVersionInfo');
      if Assigned(_HOSxP_extVersionInfo) then
      begin
           Result := _HOSxP_extVersionInfo;
      end;
    end;
  finally
    FreeLibrary(ExtLIB_DLLHandle);
  end;
end;


procedure initProc();
begin
  HOSxPLIB_DLLHandle := LoadLibrary(HOSxPLIB);
  ExtLIB_DLLHandle  := LoadLibrary(ExtLIB);

end;


initialization
//initProc;



end.
